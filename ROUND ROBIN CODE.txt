//Round Robin

//Process    Burst Time    Waiting Time    Turnaround Time
//1          5            5               10
//2          4            5               9
//3          2            2               4
//4          1            0               1
//5          3            4               7

//Average waiting time: 3.20
//Average turnaround time: 7.00

//Gantt Chart:
//| P1 | P2 | P3 | P4 | P5 | P1 | P2 | P5 | P1 |



#include <stdio.h>

#define MAX 10

// Function to calculate waiting time
void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum) {
    int rem_bt[MAX];
    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];
    }
    int t = 0; // Time variable
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
}

// Function to calculate turn around time
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}

// Function to calculate average time
void findAvgTime(int processes[], int n, int bt[], int quantum) {
    int wt[MAX], tat[MAX];
    findWaitingTime(processes, n, bt, wt, quantum);
    findTurnAroundTime(processes, n, bt, wt, tat);

    int total_wt = 0, total_tat = 0;
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], bt[i], wt[i], tat[i]);
    }

    printf("\nAverage waiting time: %.2f", (float)total_wt / n);
    printf("\nAverage turnaround time: %.2f", (float)total_tat / n);
}

// Function to print Gantt chart
void printGanttChart(int processes[], int n, int bt[], int quantum) {
    int rem_bt[MAX];
    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];
    }
    int t = 0; // Time variable
    printf("\nGantt Chart:\n|");
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                printf(" P%d |", processes[i]);
                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t += rem_bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
    printf("\n");
}

int main() {
    int processes[] = {1, 2, 3, 4};
    int n = sizeof(processes) / sizeof(processes[0]);
    int burst_time[] = {5, 4, 2, 1}; // Burst times for each process
    int quantum = 2;  // Quantum time

    findAvgTime(processes, n, burst_time, quantum);
    printGanttChart(processes, n, burst_time, quantum);

    return 0;
}
