//FCFS CODE

//tat=ct-at
//wt=tat-bt

//p1 at 0 bt 2 ct 2  tat 2 wt 0
//p2 at 1 bt 2 ct 4  tat 3 wt 1
//p3 at 5 bt 3 ct 8  tat 3 wt 0
//p4 at 6 bt 4 ct 12 tat 6 wt 2
//Average Waiting Time: 14/4
//Average Turnaround Time: 3/4


// Process ID 1, Burst time 4, Arrival time 0
// Process ID 2, Burst time 3, Arrival time 1
// Process ID 3, Burst time 2, Arrival time 2
// Process ID 4, Burst time 1, Arrival time 3
// Process ID 5, Burst time 5, Arrival time 4
//Average Waiting Time: 4.00
//Average Turnaround Time: 7.00

//Gantt Chart:
// | P1 | P2 | P3 | P4 | P5 |
//0    4    7    9    10   15

#include <stdio.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // Burst time
    int arrival_time;   // Arrival time
    int completion_time;
    int waiting_time;
    int turnaround_time;
};

void calculateFCFS(struct Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    int current_time = 0;
    // Sort processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].arrival_time > processes[j].arrival_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Calculate completion, waiting, and turnaround times
    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
        current_time = processes[i].completion_time;
    }

    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            processes[i].pid, processes[i].arrival_time, processes[i].burst_time,
            processes[i].completion_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

void displayGanttChart(struct Process processes[], int n) {
    printf("\nGantt Chart:\n");

    // Top bar
    printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n|");

    // Process ID in the middle
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time - 1; j++) printf(" ");
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst_time - 1; j++) printf(" ");
        printf("|");
    }
    printf("\n ");

    // Bottom bar
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n");

    // Completion times
    printf("0");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("  ");
        printf("%d", processes[i].completion_time);
    }
    printf("\n");
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("\nEnter arrival time and burst time for process P%d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
    }

    calculateFCFS(processes, n);
    displayGanttChart(processes, n);

    return 0;
}
