//SJF code 


#include <stdio.h>

struct Process {
    int pid;             // Process ID
    int arrival_time;    // Arrival Time
    int burst_time;      // Burst Time
    int completion_time; // Completion Time
    int waiting_time;    // Waiting Time
    int turnaround_time; // Turnaround Time
    int completed;       // Completion status (0 = not completed, 1 = completed)
};

void calculateSJF(struct Process processes[], int n) {
    int completed = 0, current_time = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;

    // Sort processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].burst_time > processes[j].burst_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Loop until all processes are completed
    while (completed < n) {
        int shortest_job = -1;
        int min_burst_time = 10000; // A large value to find the minimum burst time

        // Find the process with the smallest burst time that has arrived and is not completed
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].completed == 0) {
                if (processes[i].burst_time < min_burst_time) {
                    min_burst_time = processes[i].burst_time;
                    shortest_job = i;
                }
            }
        }

        // If we found a process that can run
        if (shortest_job != -1) {
            processes[shortest_job].completion_time = current_time + processes[shortest_job].burst_time;
            processes[shortest_job].turnaround_time = processes[shortest_job].completion_time - processes[shortest_job].arrival_time;
            processes[shortest_job].waiting_time = processes[shortest_job].turnaround_time - processes[shortest_job].burst_time;

            total_waiting_time += processes[shortest_job].waiting_time;
            total_turnaround_time += processes[shortest_job].turnaround_time;

            current_time = processes[shortest_job].completion_time;
            processes[shortest_job].completed = 1;
            completed++;
        } else {
            current_time++; // No process available, increment time
        }
    }

    // Print Process details
    printf("\nProcess ID\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid, processes[i].arrival_time, processes[i].burst_time,
               processes[i].completion_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

void displayGanttChart(struct Process processes[], int n) {
    printf("\nGantt Chart:\n ");

    // Top bar
    //printf(" ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n|");


     // Process ID in the middle
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time - 1; j++) printf(" ");
        printf("P%d", processes[i].pid);
        for (int j = 0; j < processes[i].burst_time - 1; j++) printf(" ");
        printf("|");
    }
    printf("\n ");

    // Bottom bar
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n");
;

    /// Completion times
    printf("0");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < processes[i].burst_time; j++) printf("  ");
        printf("%d", processes[i].completion_time);
    }
    printf("\n");

}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("\nEnter arrival time and burst time for process P%d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].completed = 0; // Initialize completion status to 0
    }

    calculateSJF(processes, n);
    displayGanttChart(processes, n);

    return 0;
}
